<svg xmlns="http://www.w3.org/2000/svg" xmlns:xhtml="http://www.w3.org/1999/xhtml"
     width="600" height="700" viewBox="0 0 600 700">

    <title>Font Editor - Interactive SVG</title>
    <desc>Font settings editor with preview support for Fedora</desc>

    <defs>
        <style>
            .panel { fill: white; stroke: #ced4da; stroke-width: 1; rx: 8; }
            .header { font-family: Arial, sans-serif; font-size: 20px; font-weight: bold; fill: #212529; }
            .label { font-family: Arial, sans-serif; font-size: 14px; fill: #495057; }
            .button { fill: #f8f9fa; stroke: #ced4da; stroke-width: 1; rx: 4; cursor: pointer; }
            .button:hover { fill: #e9ecef; }
            .button-active { fill: #007bff; stroke: #0056b3; }
            .button-text { font-family: Arial, sans-serif; font-size: 12px; fill: #212529; pointer-events: none; text-anchor: middle; }
            .button-active-text { fill: white; }
            .apply-button { fill: #007bff; stroke: #0056b3; }
            .apply-button:hover { fill: #0056b3; }
            .reset-button { fill: #6c757d; stroke: #5a6268; }
            .reset-button:hover { fill: #5a6268; }
            .preview-box { fill: #fafafa; stroke: #dee2e6; stroke-width: 1; stroke-dasharray: 5,5; rx: 4; }
            .preview-text { font-family: Arial, sans-serif; font-size: 16px; fill: #212529; }
            .dropdown { fill: white; stroke: #ced4da; stroke-width: 1; rx: 4; }
            .static-notice { font-family: Arial, sans-serif; font-size: 12px; fill: #6c757d; font-style: italic; }
        </style>

        <!-- Shadow filter for depth -->
        <filter id="shadow" x="-50%" y="-50%" width="200%" height="200%">
            <feDropShadow dx="0" dy="2" stdDeviation="3" flood-opacity="0.1"/>
        </filter>
    </defs>

    <!-- Background -->
    <rect width="600" height="700" fill="#f8f9fa"/>

    <!-- Static Preview for File Managers (always visible) -->
    <g id="static-preview">
        <!-- Main Panel -->
        <rect x="20" y="20" width="560" height="660" class="panel" filter="url(#shadow)"/>

        <!-- Header -->
        <text x="300" y="55" text-anchor="middle" class="header">Font Settings Editor</text>

        <!-- Static preview info -->
        <text x="300" y="350" text-anchor="middle" class="static-notice">
            Open in browser for interactive functionality
        </text>

        <!-- Visual representation of controls -->
        <g id="static-controls">
            <!-- Font Family Section -->
            <text x="40" y="100" class="label">Font Family:</text>
            <rect x="40" y="110" width="200" height="32" class="dropdown"/>
            <text x="50" y="130" font-size="12" fill="#495057">Arial, sans-serif</text>

            <!-- Font Size Section -->
            <text x="40" y="170" class="label">Font Size:</text>
            <rect x="40" y="180" width="80" height="32" class="dropdown"/>
            <text x="50" y="200" font-size="12" fill="#495057">16px</text>

            <!-- Style Buttons -->
            <text x="40" y="240" class="label">Font Style:</text>
            <rect x="40" y="250" width="60" height="28" class="button"/>
            <text x="70" y="268" class="button-text">Normal</text>
            <rect x="110" y="250" width="60" height="28" class="button"/>
            <text x="140" y="268" class="button-text">Italic</text>

            <!-- Preview Box -->
            <text x="40" y="320" class="label">Preview:</text>
            <rect x="40" y="330" width="520" height="80" class="preview-box"/>
            <text x="300" y="370" text-anchor="middle" class="preview-text">
                The quick brown fox jumps over the lazy dog
            </text>
        </g>
    </g>

    <!-- Interactive Version (hidden initially, shown via JavaScript) -->
    <g id="interactive-version" style="display: none">
        <!-- Clear static content first -->
        <rect width="600" height="700" fill="#f8f9fa"/>
        <rect x="20" y="20" width="560" height="660" class="panel" filter="url(#shadow)"/>

        <!-- Interactive Header -->
        <text x="300" y="55" text-anchor="middle" class="header">Font Settings Editor</text>
        <text x="300" y="75" text-anchor="middle" font-size="12" fill="#6c757d">Interactive Mode</text>

        <!-- Font Family Dropdown -->
        <text x="40" y="110" class="label">Font Family:</text>
        <foreignObject x="40" y="120" width="250" height="35">
            <xhtml:select id="fontFamily" style="width:100%; height:100%; padding:6px; border:1px solid #ced4da; border-radius:4px; font-size:14px;">
                <xhtml:option value="Arial, sans-serif">Arial</xhtml:option>
                <xhtml:option value="'Times New Roman', serif">Times New Roman</xhtml:option>
                <xhtml:option value="'Courier New', monospace">Courier New</xhtml:option>
                <xhtml:option value="Georgia, serif">Georgia</xhtml:option>
                <xhtml:option value="Verdana, sans-serif">Verdana</xhtml:option>
                <xhtml:option value="'Comic Sans MS', cursive">Comic Sans MS</xhtml:option>
            </xhtml:select>
        </foreignObject>

        <!-- Font Size Input -->
        <text x="40" y="180" class="label">Font Size:</text>
        <foreignObject x="40" y="190" width="100" height="35">
            <xhtml:input type="number" id="fontSize" value="16" min="8" max="72"
                         style="width:100%; height:100%; padding:6px; border:1px solid #ced4da; border-radius:4px; font-size:14px;"/>
        </foreignObject>

        <!-- Size Preset Buttons -->
        <g id="size-presets">
            <rect x="160" y="190" width="40" height="32" class="button" onclick="setFontSize(12)"/>
            <text x="180" y="209" class="button-text">12</text>

            <rect x="210" y="190" width="40" height="32" class="button" onclick="setFontSize(16)"/>
            <text x="230" y="209" class="button-text">16</text>

            <rect x="260" y="190" width="40" height="32" class="button" onclick="setFontSize(20)"/>
            <text x="280" y="209" class="button-text">20</text>

            <rect x="310" y="190" width="40" height="32" class="button" onclick="setFontSize(24)"/>
            <text x="330" y="209" class="button-text">24</text>
        </g>

        <!-- Font Weight -->
        <text x="40" y="255" class="label">Font Weight:</text>
        <g id="weight-buttons">
            <rect x="40" y="265" width="60" height="32" class="button" id="weight-normal" onclick="setFontWeight('normal')"/>
            <text x="70" y="284" class="button-text">Normal</text>

            <rect x="110" y="265" width="60" height="32" class="button" id="weight-bold" onclick="setFontWeight('bold')"/>
            <text x="140" y="284" class="button-text">Bold</text>
        </g>

        <!-- Font Style -->
        <text x="40" y="325" class="label">Font Style:</text>
        <g id="style-buttons">
            <rect x="40" y="335" width="60" height="32" class="button" id="style-normal" onclick="setFontStyle('normal')"/>
            <text x="70" y="354" class="button-text">Normal</text>

            <rect x="110" y="335" width="60" height="32" class="button" id="style-italic" onclick="setFontStyle('italic')"/>
            <text x="140" y="354" class="button-text">Italic</text>
        </g>

        <!-- Text Decoration -->
        <text x="40" y="395" class="label">Text Decoration:</text>
        <g id="decoration-buttons">
            <rect x="40" y="405" width="60" height="32" class="button" id="deco-none" onclick="setTextDecoration('none')"/>
            <text x="70" y="424" class="button-text">None</text>

            <rect x="110" y="405" width="80" height="32" class="button" id="deco-underline" onclick="setTextDecoration('underline')"/>
            <text x="150" y="424" class="button-text">Underline</text>

            <rect x="200" y="405" width="90" height="32" class="button" id="deco-line-through" onclick="setTextDecoration('line-through')"/>
            <text x="245" y="424" class="button-text">Strikethrough</text>
        </g>

        <!-- Preview Section -->
        <text x="40" y="470" class="label">Preview:</text>
        <rect x="40" y="480" width="520" height="100" class="preview-box"/>
        <text x="300" y="530" text-anchor="middle" id="preview-text"
              class="preview-text" font-family="Arial, sans-serif" font-size="16">
            The quick brown fox jumps over the lazy dog
        </text>

        <!-- Action Buttons -->
        <g id="action-buttons">
            <rect x="40" y="600" width="100" height="40" class="apply-button" onclick="applySettings()"/>
            <text x="90" y="625" text-anchor="middle" fill="white" font-size="14" font-weight="bold">Apply</text>

            <rect x="160" y="600" width="100" height="40" class="reset-button" onclick="resetSettings()"/>
            <text x="210" y="625" text-anchor="middle" fill="white" font-size="14" font-weight="bold">Reset</text>
        </g>

        <!-- Current Settings Display -->
        <text x="300" y="620" font-size="11" fill="#6c757d" id="current-settings">
            Current: Arial, 16px, normal
        </text>
    </g>

    <!-- JavaScript for Interactivity -->
    <script type="text/javascript"><![CDATA[
    // Configuration object
    let fontConfig = {
      family: 'Arial, sans-serif',
      size: 16,
      weight: 'normal',
      style: 'normal',
      decoration: 'none'
    };

    // Check if running in browser (not file preview)
    if (typeof window !== 'undefined' && window.document) {
      // Show interactive version
      document.getElementById('static-preview').style.display = 'none';
      document.getElementById('interactive-version').style.display = 'block';

      // Initialize event listeners when DOM is ready
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initializeEditor);
      } else {
        initializeEditor();
      }
    }

    function initializeEditor() {
      // Set up font family change listener
      const fontFamilySelect = document.getElementById('fontFamily');
      if (fontFamilySelect) {
        fontFamilySelect.addEventListener('change', function(e) {
          fontConfig.family = e.target.value;
          updatePreview();
        });
      }

      // Set up font size change listener
      const fontSizeInput = document.getElementById('fontSize');
      if (fontSizeInput) {
        fontSizeInput.addEventListener('input', function(e) {
          fontConfig.size = parseInt(e.target.value) || 16;
          updatePreview();
        });
      }

      // Initialize button states
      updateButtonStates();
      updatePreview();
    }

    function setFontSize(size) {
      fontConfig.size = size;
      const input = document.getElementById('fontSize');
      if (input) input.value = size;
      updatePreview();
    }

    function setFontWeight(weight) {
      fontConfig.weight = weight;
      updateButtonStates();
      updatePreview();
    }

    function setFontStyle(style) {
      fontConfig.style = style;
      updateButtonStates();
      updatePreview();
    }

    function setTextDecoration(decoration) {
      fontConfig.decoration = decoration;
      updateButtonStates();
      updatePreview();
    }

    function updateButtonStates() {
      // Update weight buttons
      const weightButtons = document.querySelectorAll('#weight-buttons rect');
      weightButtons.forEach(btn => {
        btn.setAttribute('class', 'button');
      });
      const activeWeight = document.getElementById('weight-' + fontConfig.weight);
      if (activeWeight) activeWeight.setAttribute('class', 'button button-active');

      // Update style buttons
      const styleButtons = document.querySelectorAll('#style-buttons rect');
      styleButtons.forEach(btn => {
        btn.setAttribute('class', 'button');
      });
      const activeStyle = document.getElementById('style-' + fontConfig.style);
      if (activeStyle) activeStyle.setAttribute('class', 'button button-active');

      // Update decoration buttons
      const decoButtons = document.querySelectorAll('#decoration-buttons rect');
      decoButtons.forEach(btn => {
        btn.setAttribute('class', 'button');
      });
      const activeDeco = document.getElementById('deco-' + fontConfig.decoration);
      if (activeDeco) activeDeco.setAttribute('class', 'button button-active');
    }

    function updatePreview() {
      const preview = document.getElementById('preview-text');
      if (preview) {
        preview.style.fontFamily = fontConfig.family;
        preview.style.fontSize = fontConfig.size + 'px';
        preview.style.fontWeight = fontConfig.weight;
        preview.style.fontStyle = fontConfig.style;
        preview.style.textDecoration = fontConfig.decoration;

        // Update the font-size attribute for SVG
        preview.setAttribute('font-size', fontConfig.size);
        preview.setAttribute('font-weight', fontConfig.weight);
        preview.setAttribute('font-style', fontConfig.style);
        preview.setAttribute('text-decoration', fontConfig.decoration);
      }

      // Update current settings display
      const settingsText = document.getElementById('current-settings');
      if (settingsText) {
        const familyName = fontConfig.family.split(',')[0].replace(/['"]/g, '');
        settingsText.textContent = `Current: ${familyName}, ${fontConfig.size}px, ${fontConfig.weight}, ${fontConfig.style}`;
      }
    }

    function applySettings() {
      // In a real application, this would save the settings
      alert('Font settings applied:\n' + JSON.stringify(fontConfig, null, 2));
      console.log('Applied settings:', fontConfig);
    }

    function resetSettings() {
      fontConfig = {
        family: 'Arial, sans-serif',
        size: 16,
        weight: 'normal',
        style: 'normal',
        decoration: 'none'
      };

      // Reset form elements
      const fontFamilySelect = document.getElementById('fontFamily');
      if (fontFamilySelect) fontFamilySelect.value = fontConfig.family;

      const fontSizeInput = document.getElementById('fontSize');
      if (fontSizeInput) fontSizeInput.value = fontConfig.size;

      updateButtonStates();
      updatePreview();
    }
  ]]></script>
</svg>
